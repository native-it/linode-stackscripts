#!/bin/bash
# 
# <UDF name="user_name" label="Unprivileged User Account" />
# <UDF name="user_password" label="Unprivileged User Password" />
# <UDF name="user_sshkey" label="RSA Public Key (Recommended)" />
#
# <UDF name="hostname" label="Hostname" example="" />
# <UDF name="fqdn" label="Fully Qualified Domain Name (FQDN)" example="Example: docker01.mydomain.com" />
# <UDF name="tz" label="Time Zone" default="America/New_York" example="Example: America/New_York (see: http://bit.ly/TZlisting)" />
#
# <UDF name="sshd_port" label="SSH Port" default="22" />
# <UDF name="sshd_protocol" label="SSH Protocol (Default is '2')" oneOf="1,2,1 and 2" default="2" />
# <UDF name="sshd_permitroot" label="SSH Permit Root Login (Default is 'no')" oneof="No,Yes" default="No" />
# <UDF name="sshd_passwordauth" label="SSH Password Authentication (Default is 'no')" oneOf="No,Yes" default="No" />
# <UDF name="sshd_group" label="SSH Allowed Groups (Default is 'sshusers')" default="sshusers" example="List of groups seperated by spaces" />
# <UDF name="sudo_usergroup" label="Admin Usergroup (Default is 'wheel')" default="wheel" />
# <UDF name="sudo_passwordless" label="Passwordless Sudo (Not Recommended)" oneof="Require Password,Do Not Require Password", default="Require Password" />
# Include Linode BASH Library from https://cloud.linode.com/stackscripts/1
source <ssinclude StackScriptID=1>
# Variables
IPADDR=$(/sbin/ifconfig eth0 | awk '/inet / { print $2 }' | sed 's/addr://')
# Set timezone
if [ -n $TZ ]
then
  timedatectl set-timezone $TZ
fi
# Update repositories and system packages
echo "###################################################################################"
echo "Please be Patient: Installation will start now....... It may take some time :)"
echo "###################################################################################"
apt update
DEBIAN_FRONTEND=noninteractive apt upgrade -y
# Set the hostname & add fully-qualified domain name (FQDN) in hosts file
echo $HOSTNAME > /etc/hostname
hostname -F /etc/hostname
if [ -n $FQDN ]
then
  echo $IPADDR $FQDN $HOSTNAME >> /etc/hosts
else
  echo $IPADDR $HOSTNAME >> /etc/hosts
fi
# Install dependencies
apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
apt-get -y install aptitude
aptitude -y install net-tools
aptitude -y install apt-transport-https
# Setup sudo
aptitude -y install sudo
cp /etc/sudoers /etc/sudoers.tmp
chmod 0640 /etc/sudoers.tmp
test "${SUDO_PASSWORDLESS}" == "Do Not Require Password" && (echo "%`echo ${SUDO_USERGROUP} | tr '[:upper:]' '[:lower:]'` ALL = NOPASSWD: ALL" >> /etc/sudoers.tmp)
test "${SUDO_PASSWORDLESS}" == "Require Password" && (echo "%`echo ${SUDO_USERGROUP} | tr '[:upper:]' '[:lower:]'` ALL = (ALL) ALL" >> /etc/sudoers.tmp)
chmod 0440 /etc/sudoers.tmp
mv /etc/sudoers.tmp /etc/sudoers
# Create Groups
groupadd ${SSHD_GROUP}
groupadd ${SUDO_USERGROUP}
# Create User & Add SSH Key
USER_NAME_LOWER=`echo ${USER_NAME} | tr '[:upper:]' '[:lower:]'`
useradd -m -s /bin/bash -G ${SSHD_GROUP},${SUDO_USERGROUP} ${USER_NAME_LOWER}
echo "${USER_NAME_LOWER}:${USER_PASSWORD}" | chpasswd
USER_HOME=`sed -n "s/${USER_NAME_LOWER}:x:[0-9]*:[0-9]*:[^:]*:\(.*\):.*/\1/p" < /etc/passwd`
sudo -u ${USER_NAME_LOWER} mkdir ${USER_HOME}/.ssh
echo "${USER_SSHKEY}" >> $USER_HOME/.ssh/authorized_keys
chmod 0600 $USER_HOME/.ssh/authorized_keys
chown ${USER_NAME_LOWER}:${USER_NAME_LOWER} $USER_HOME/.ssh/authorized_keys
# Configure SSHD
echo "Port ${SSHD_PORT}" > /etc/ssh/sshd_config.tmp
echo "Protocol ${SSHD_PROTOCOL}" >> /etc/ssh/sshd_config.tmp
echo "PubkeyAuthentication yes" >> /etc/ssh/sshd_config.tmp
sed -n 's/\(HostKey .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(UsePrivilegeSeparation .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(KeyRegenerationInterval .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(ServerKeyBits .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(SyslogFacility .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(LogLevel .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(LoginGraceTime .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
echo "PermitRootLogin `echo ${SSHD_PERMITROOT} | tr '[:upper:]' '[:lower:]'`" >> /etc/ssh/sshd_config.tmp
sed -n 's/\(StrictModes .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(RSAAuthentication .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(IgnoreRhosts .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(RhostsRSAAuthentication .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(HostbasedAuthentication .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(PermitEmptyPasswords .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(ChallengeResponseAuthentication .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
echo "PasswordAuthentication `echo ${SSHD_PASSWORDAUTH} | tr '[:upper:]' '[:lower:]'`" >> /etc/ssh/sshd_config.tmp
sed -n 's/\(X11Forwarding .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(X11DisplayOffset .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(PrintMotd .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(PrintLastLog .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(TCPKeepAlive .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(MaxStartups .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(AcceptEnv .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(Subsystem .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
sed -n 's/\(UsePAM .*\)/\1/p' < /etc/ssh/sshd_config >> /etc/ssh/sshd_config.tmp
echo "AllowGroups `echo ${SSHD_GROUP} | tr '[:upper:]' '[:lower:]'`" >> /etc/ssh/sshd_config.tmp
chmod 0600 /etc/ssh/sshd_config.tmp
cp /etc/ssh/sshd_config.tmp /etc/ssh/sshd_config
touch /tmp/restart-ssh
# Install UFW
aptitude -y install ufw
# Set firewall ports for SSH access.
ufw allow ${SSHD_PORT}/tcp
# Wrap it up
automatic_security_updates
goodstuff
all_set
restartServices
